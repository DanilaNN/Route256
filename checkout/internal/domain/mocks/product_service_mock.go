// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	context "context"
	models "route256/checkout/internal/domain/models"

	mock "github.com/stretchr/testify/mock"
)

// ProductServiceClient is an autogenerated mock type for the ProductServiceClient type
type ProductServiceClient struct {
	mock.Mock
}

// GetProduct provides a mock function with given fields: ctx, sku
func (_m *ProductServiceClient) GetProduct(ctx context.Context, sku uint32) (models.Product, error) {
	ret := _m.Called(ctx, sku)

	var r0 models.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32) (models.Product, error)); ok {
		return rf(ctx, sku)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint32) models.Product); ok {
		r0 = rf(ctx, sku)
	} else {
		r0 = ret.Get(0).(models.Product)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint32) error); ok {
		r1 = rf(ctx, sku)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSkus provides a mock function with given fields: ctx, startAfterSku, count
func (_m *ProductServiceClient) ListSkus(ctx context.Context, startAfterSku uint32, count uint32) (models.Skus, error) {
	ret := _m.Called(ctx, startAfterSku, count)

	var r0 models.Skus
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32, uint32) (models.Skus, error)); ok {
		return rf(ctx, startAfterSku, count)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint32, uint32) models.Skus); ok {
		r0 = rf(ctx, startAfterSku, count)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(models.Skus)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint32, uint32) error); ok {
		r1 = rf(ctx, startAfterSku, count)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewProductServiceClient creates a new instance of ProductServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProductServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProductServiceClient {
	mock := &ProductServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	context "context"
	models "route256/checkout/internal/domain/models"

	mock "github.com/stretchr/testify/mock"
)

// PGRepository is an autogenerated mock type for the PGRepository type
type PGRepository struct {
	mock.Mock
}

// AddCart provides a mock function with given fields: ctx, userOrder
func (_m *PGRepository) AddCart(ctx context.Context, userOrder models.UserOrderItem) error {
	ret := _m.Called(ctx, userOrder)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.UserOrderItem) error); ok {
		r0 = rf(ctx, userOrder)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DecreaseSkuCountInCart provides a mock function with given fields: ctx, userOrder, delta
func (_m *PGRepository) DecreaseSkuCountInCart(ctx context.Context, userOrder models.UserOrderItem, delta int32) error {
	ret := _m.Called(ctx, userOrder, delta)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.UserOrderItem, int32) error); ok {
		r0 = rf(ctx, userOrder, delta)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteCart provides a mock function with given fields: ctx, userID
func (_m *PGRepository) DeleteCart(ctx context.Context, userID int64) error {
	ret := _m.Called(ctx, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUserSku provides a mock function with given fields: ctx, userOrder
func (_m *PGRepository) DeleteUserSku(ctx context.Context, userOrder models.UserOrderItem) error {
	ret := _m.Called(ctx, userOrder)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.UserOrderItem) error); ok {
		r0 = rf(ctx, userOrder)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCart provides a mock function with given fields: ctx, orderID
func (_m *PGRepository) GetCart(ctx context.Context, orderID int64) (models.ProductCarts, error) {
	ret := _m.Called(ctx, orderID)

	var r0 models.ProductCarts
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (models.ProductCarts, error)); ok {
		return rf(ctx, orderID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) models.ProductCarts); ok {
		r0 = rf(ctx, orderID)
	} else {
		r0 = ret.Get(0).(models.ProductCarts)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, orderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSkuCountInCart provides a mock function with given fields: ctx, userOrder
func (_m *PGRepository) GetSkuCountInCart(ctx context.Context, userOrder models.UserOrderItem) (uint32, error) {
	ret := _m.Called(ctx, userOrder)

	var r0 uint32
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.UserOrderItem) (uint32, error)); ok {
		return rf(ctx, userOrder)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.UserOrderItem) uint32); ok {
		r0 = rf(ctx, userOrder)
	} else {
		r0 = ret.Get(0).(uint32)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.UserOrderItem) error); ok {
		r1 = rf(ctx, userOrder)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPGRepository creates a new instance of PGRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPGRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *PGRepository {
	mock := &PGRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
